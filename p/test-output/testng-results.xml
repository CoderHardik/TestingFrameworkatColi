<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="8" passed="6" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2019-05-30T21:53:26Z" name="Default suite" finished-at="2019-05-30T21:56:13Z" duration-ms="167400">
    <groups>
    </groups>
    <test started-at="2019-05-30T21:53:26Z" name="Default test" finished-at="2019-05-30T21:56:13Z" duration-ms="167400">
      <class name="test.LoginLoadTime">
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:53:26Z" name="beforeMethod" finished-at="2019-05-30T21:53:34Z" duration-ms="7620" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_monthly_predictive_Forecast()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:53:34Z" name="test_monthly_predictive_Forecast" finished-at="2019-05-30T21:53:45Z" duration-ms="11239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_monthly_predictive_Forecast -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:53:45Z" name="afterMethod" finished-at="2019-05-30T21:53:45Z" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:53:45Z" name="beforeMethod" finished-at="2019-05-30T21:53:51Z" duration-ms="6127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_quaterly_predictive_Forecast()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:53:51Z" name="test_quaterly_predictive_Forecast" finished-at="2019-05-30T21:54:00Z" duration-ms="8693" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_quaterly_predictive_Forecast -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:00Z" name="afterMethod" finished-at="2019-05-30T21:54:00Z" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:00Z" name="beforeMethod" finished-at="2019-05-30T21:54:06Z" duration-ms="6039" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_topleft_network()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:06Z" name="test_topleft_network" finished-at="2019-05-30T21:54:13Z" duration-ms="7279" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_topleft_network -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:13Z" name="afterMethod" finished-at="2019-05-30T21:54:13Z" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:13Z" name="beforeMethod" finished-at="2019-05-30T21:54:21Z" duration-ms="7157" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_topleft_opportunity()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:21Z" name="test_topleft_opportunity" finished-at="2019-05-30T21:54:36Z" duration-ms="15842" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_topleft_opportunity -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:36Z" name="afterMethod" finished-at="2019-05-30T21:54:37Z" duration-ms="675" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:37Z" name="beforeMethod" finished-at="2019-05-30T21:54:44Z" duration-ms="6783" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_whats_happening_activities()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:44Z" name="test_whats_happening_activities" finished-at="2019-05-30T21:54:50Z" duration-ms="6552" status="FAIL">
          <exception class="java.lang.NumberFormatException">
            <message>
              <![CDATA[For input string: ""]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NumberFormatException: For input string: ""
at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
at java.base/java.lang.Integer.parseInt(Integer.java:662)
at java.base/java.lang.Integer.parseInt(Integer.java:770)
at test.LoginLoadTime.test_whats_happening_activities(LoginLoadTime.java:206)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NumberFormatException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_whats_happening_activities -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:50Z" name="afterMethod" finished-at="2019-05-30T21:54:51Z" duration-ms="179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:51Z" name="beforeMethod" finished-at="2019-05-30T21:54:57Z" duration-ms="6088" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_whats_happening_play()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:54:57Z" name="test_whats_happening_play" finished-at="2019-05-30T21:55:06Z" duration-ms="8873" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_whats_happening_play -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:55:06Z" name="afterMethod" finished-at="2019-05-30T21:55:06Z" duration-ms="166" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:55:06Z" name="beforeMethod" finished-at="2019-05-30T21:55:11Z" duration-ms="5444" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_whats_happening_risk()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:55:11Z" name="test_whats_happening_risk" finished-at="2019-05-30T21:55:30Z" duration-ms="18490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_whats_happening_risk -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:55:30Z" name="afterMethod" finished-at="2019-05-30T21:55:30Z" duration-ms="119" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:55:30Z" name="beforeMethod" finished-at="2019-05-30T21:55:35Z" duration-ms="5396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="test_yearly_predictive_Forecast()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:55:35Z" name="test_yearly_predictive_Forecast" finished-at="2019-05-30T21:56:13Z" duration-ms="38061" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for test.LoginLoadTime$$Lambda$222/1197176722@751e664e (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '3.9.1', revision: '63f7b50', time: '2018-02-07T22:25:02.294Z'
System info: host: 'L-0125-hshah.local', ip: 'fe80:0:0:0:148c:5b1f:7358:d157%en0', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.14.5', java.version: '10.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.40.565386 (45a059dc425e08..., userDataDir: /var/folders/yz/ytc_yyxd7gz...}, cssSelectorsEnabled: true, databaseEnabled: false, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 74.0.3729.169, webStorageEnabled: true}
Session ID: 38661c6678c4be0e4fdd663894e58372]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for test.LoginLoadTime$$Lambda$222/1197176722@751e664e (tried for 30 second(s) with 500 milliseconds interval)
Build info: version: '3.9.1', revision: '63f7b50', time: '2018-02-07T22:25:02.294Z'
System info: host: 'L-0125-hshah.local', ip: 'fe80:0:0:0:148c:5b1f:7358:d157%en0', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.14.5', java.version: '10.0.2'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, acceptSslCerts: false, applicationCacheEnabled: false, browserConnectionEnabled: false, browserName: chrome, chrome: {chromedriverVersion: 2.40.565386 (45a059dc425e08..., userDataDir: /var/folders/yz/ytc_yyxd7gz...}, cssSelectorsEnabled: true, databaseEnabled: false, handlesAlerts: true, hasTouchScreen: false, javascriptEnabled: true, locationContextEnabled: true, mobileEmulationEnabled: false, nativeEvents: true, networkConnectionEnabled: false, pageLoadStrategy: normal, platform: MAC, platformName: MAC, rotatable: false, setWindowRect: true, takesHeapSnapshot: true, takesScreenshot: true, unexpectedAlertBehaviour: , unhandledPromptBehavior: , version: 74.0.3729.169, webStorageEnabled: true}
Session ID: 38661c6678c4be0e4fdd663894e58372
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:81)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:271)
at test.LoginLoadTime.test_yearly_predictive_Forecast(LoginLoadTime.java:126)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:580)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:716)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:988)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test_yearly_predictive_Forecast -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:test.LoginLoadTime@25641d39]" started-at="2019-05-30T21:56:13Z" name="afterMethod" finished-at="2019-05-30T21:56:13Z" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- test.LoginLoadTime -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
